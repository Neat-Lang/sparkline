module sparkline;

macro import cx.macros.assert;
macro import cx.macros.listcomprehension;

string[] default_ticks() {
    return ["▁", "▂", "▃", "▄", "▅", "▆", "▇", "█"];
}

string sparkline(string[] ticks, int[] data) {
    assert(ticks.length > 0);
    assert(data.length > 0);

    int n = (cast(int) ticks.length) - 1;
    int min = [min point for point in data];
    int max = [max point for point in data];

    if (min == max) {
        // All points are the same.
        return [join "" ticks[n / 2] for _ in data];
    } else {
        string spark(int point) {
            return ticks[n * (point - min) / (max - min)];
        }
        return [join "" spark(n) for n in data];
    }
}
